package uz.pdp.project.controller;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ResponseBody;
import uz.pdp.project.dto.SignInDTO;
import uz.pdp.project.dto.SignUpDTO;
import uz.pdp.project.entity.User;
import uz.pdp.project.service.UserService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.Collections;

@Controller
@RequestMapping("/auth")
@RequiredArgsConstructor
public class AuthController {
    private static final Logger log = LoggerFactory.getLogger(AuthController.class);
    private final UserService userService;

    @GetMapping("/signin")
    public String getSignInPage() {
        return "signin"; // This will render signin.html template
    }

    @PostMapping(value = "/signin", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<Map<String, Object>> signIn(
            @Valid @RequestBody SignInDTO signInDTO,
            BindingResult bindingResult,
            HttpSession session) {

        // Validate input
        if (signInDTO == null) {
            log.error("Received null SignInDTO");
            return ResponseEntity
                    .badRequest()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Collections.singletonMap("message", "Invalid request"));
        }

        log.error("Received SignInDTO: email={}, password={}",
                signInDTO.getEmail(),
                signInDTO.getPassword() != null ? "[PROTECTED]" : "null");

        // Comprehensive validation logging
        if (bindingResult.hasErrors()) {
            List<String> errors = bindingResult.getFieldErrors().stream()
                    .map(error -> error.getField() + ": " + error.getDefaultMessage())
                    .collect(Collectors.toList());

            log.error("Validation errors: {}", errors);

            return ResponseEntity
                    .badRequest()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Map.of(
                            "message", "Validation failed",
                            "errors", errors,
                            "error", true));
        }

        try {
            // Explicit null checks
            if (signInDTO.getEmail() == null || signInDTO.getPassword() == null) {
                log.error("Null email or password received");
                return ResponseEntity
                        .badRequest()
                        .contentType(MediaType.APPLICATION_JSON)
                        .body(Map.of(
                                "message", "Email и пароль обязательны",
                                "error", true,
                                "details", "Пожалуйста, введите email и пароль"));
            }

            Optional<User> userOptional = userService.authenticateUser(signInDTO);

            if (userOptional.isPresent()) {
                User user = userOptional.get();

                // Defensive null checks before accessing user properties
                String firstName = Optional.ofNullable(user.getFirstName()).orElse("Пользователь");
                String username = Optional.ofNullable(user.getUsername()).orElse("unknown");
                String email = Optional.ofNullable(user.getEmail()).orElse(signInDTO.getEmail());
                String role = Optional.ofNullable(user.getRole()).orElse("USER");

                session.setAttribute("userId", user.getId());
                session.setAttribute("userEmail", email);
                session.setAttribute("userRole", role);

                log.info("User authenticated successfully: {}", email);

                return ResponseEntity.ok()
                        .contentType(MediaType.APPLICATION_JSON)
                        .body(Map.of(
                                "message", "Добро пожаловать, " + firstName + "!",
                                "username", username,
                                "email", email,
                                "redirect", "/",
                                "error", false,
                                "details", null));
            }

            log.warn("Login failed for email: {}", signInDTO.getEmail());
            return ResponseEntity
                    .status(HttpStatus.UNAUTHORIZED)
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Map.of(
                            "message", "Неверный email или пароль",
                            "error", true,
                            "details", "Проверьте правильность введенных данных",
                            "username", null,
                            "email", null,
                            "redirect", null));

        } catch (Exception e) {
            // Log the full stack trace
            log.error("Unexpected error during login", e);

            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Collections.singletonMap(
                            "message",
                            Optional.ofNullable(e.getMessage())
                                    .orElse("Произошла непредвиденная ошибка")));
        }
    }

    @GetMapping("/signup")
    public String getSignUpPage() {
        return "signup"; // This will render signup.html template
    }

    @PostMapping(value = "/signup", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<Map<String, Object>> signUp(
            @Valid @RequestBody Map<String, String> payload,
            BindingResult bindingResult) {

        log.info("Signup payload: {}", payload);

        SignUpDTO signUpDTO = SignUpDTO.builder()
                .username(payload.get("username"))
                .firstName(payload.get("firstName"))
                .lastName(payload.getOrDefault("lastName", ""))
                .email(payload.get("email"))
                .password(payload.get("password"))
                .build();

        String confirmPassword = payload.get("confirmPassword");

        if (confirmPassword != null && !signUpDTO.passwordsMatch(confirmPassword)) {
            log.warn("Passwords do not match");
            return ResponseEntity
                    .badRequest()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Map.of(
                            "message", "Пароли не совпадают",
                            "error", true,
                            "details", "Убедитесь, что пароли введены одинаково"));
        }

        try {
            userService.registerUser(signUpDTO);
            return ResponseEntity
                    .ok()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Map.of(
                            "message", "Регистрация успешна! Войдите в аккаунт.",
                            "username", signUpDTO.getUsername(),
                            "email", signUpDTO.getEmail(),
                            "redirect", "/auth/signin",
                            "error", false));
        } catch (Exception e) {
            log.error("Registration failed: {}", e.getMessage());

            String errorMessage = e.getMessage();
            if (errorMessage.contains("Email")) {
                return ResponseEntity
                        .status(HttpStatus.CONFLICT)
                        .contentType(MediaType.APPLICATION_JSON)
                        .body(Map.of(
                                "message", "Email уже используется",
                                "error", true,
                                "email", signUpDTO.getEmail(),
                                "details", "Попробуйте войти или восстановить пароль"));
            } else if (errorMessage.contains("Username")) {
                return ResponseEntity
                        .status(HttpStatus.CONFLICT)
                        .contentType(MediaType.APPLICATION_JSON)
                        .body(Map.of(
                                "message", "Имя пользователя уже занято",
                                "error", true,
                                "username", signUpDTO.getUsername(),
                                "details", "Выберите другое имя пользователя"));
            }

            return ResponseEntity
                    .status(HttpStatus.CONFLICT)
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Map.of(
                            "message", "Не удалось зарегистрироваться",
                            "error", true,
                            "details", errorMessage));
        }
    }

    @PostMapping(value = "/logout", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<Map<String, Object>> logout(HttpSession session) {
        session.invalidate();
        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_JSON)
                .body(Map.of(
                        "message", "Вы успешно вышли из системы",
                        "redirect", "/auth/signin"));
    }

    @GetMapping("/profile")
    public String getProfilePage() {
        return "profile"; // This will render profile.html template
    }

    @GetMapping(value = "/check-session", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<Map<String, Object>> checkSession(HttpSession session) {
        String username = (String) session.getAttribute("username");
        if (username != null) {
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(Map.of(
                            "authenticated", true,
                            "username", username));
        }
        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_JSON)
                .body(Map.of(
                        "authenticated", false));
    }

    @GetMapping(value = "/check-page", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<Map<String, Object>> checkPage() {
        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_JSON)
                .body(Map.of(
                        "page", "signin",
                        "redirect", "/auth/signin"));
    }
}
